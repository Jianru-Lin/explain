#!/usr/bin/env node

var fs = require('fs');

var loadFrom = process.argv[2];
var saveTo = process.argv[3];

if (!loadFrom) {
	showUsage();
} else {
	saveTo = saveTo || 'xpl.' + loadFrom;
	preprocessor(loadFrom, saveTo);
}

function showUsage() {
	console.log('explain input [output]');
}

function preprocessor(loadFrom, saveTo) {
	// [变量]
	var before = null,
		after = null;

	// [流程]
	//@enter
	if (!loadFrom || !saveTo) {
		//> 参数无效
		return false;
	}
	return load() && preprocess() && save();
	//@leave

	// [函数]
	function load() {
		//@enter
		if (!fs.existsSync(loadFrom)) {
			//> 文件不存在
			return false;
		}
		try {
			//> 准备以 utf8 编码读取文件...
			before = fs.readFileSync(loadFrom, 'utf8');
			//> 读取文件成功
			return true;
		} catch(err) {
			//> 读取文件时发生错误
			return false;
		}
		//@leave
	}

	function preprocess() {
		// [变量]
		var varName = 'e7b4_xpl',
			enterPattern = new RegExp('^(\\s*)//@enter', 'gm'),
			leavePattern = new RegExp('^(\\s*)//@leave', 'gm'),
			proxyPattern = new RegExp('/\\*{\\*/([^\\*]*)/\\*}\\*/', 'g');
			printLnPattern = new RegExp('^(\\s*)//>(.*)', 'gm'),
			outputPattern = new RegExp('^(\\s*)//@output', 'gm');

		// [流程]
		//@enter
		if (before === undefined || before === null) {
			//> 程序员错误：before 变量为 undefined 或 null
			return false;
		}
		after = before;
		replacePrintLn();
		replaceEnter();
		replaceLeave();
		replaceOutput();
		replaceProxy();
		prependHead();
		return true;
		//@leave

		// [函数]
		function replaceEnter() {
			//@enter
			//> 替换所有的 //@enter 为 e7b4_xpl.g.enter(); try {
			after = after.replace(enterPattern, replaceCallback);
			//@leave

			function replaceCallback(g0, g1) {
				return g1 + varName + '.g.enter(); try {';
			}
		}

		function replaceLeave() {
			//@enter
			//> 替换所有的 //@leave 为 } finally { e7b4_xpl.g.leave(); }
			after = after.replace(leavePattern, replaceCallback);
			//@leave

			function replaceCallback(g0, g1) {
				return g1 + '} finally { ' + varName + '.g.leave(); }';
			}
		}

		function replaceProxy() {
			//@enter
			//> 替换所有的 /*{*/.../*}*/ 为 e7b4_xpl.g.proxy(...)
			after = after.replace(proxyPattern, replaceCallback);
			//@leave

			function replaceCallback(g0, g1) {
				return varName + '.g.proxy(' + g1 + ')';
			}
		}

		function replacePrintLn() {
			//@enter
			//> 替换所有的 //> ... 为 e7b4_xpl.g.printLn(...) 并正确的处理字符串转义问题
			after = after.replace(printLnPattern, replaceCallback);
			//@leave

			function replaceCallback(g0, g1, g2) {
				g2 = strEscape(g2.trim());
				return g1 + varName + '.g.printLn(\'' + g2.trim() + '\');';

				function strEscape(input) {
					if (!input) return input;
					var output = "";
					for (var i = 0, len = input.length; i < len; ++i) {
						var c = input[i];
						switch (c) {
							case '\\':
								c = '\\\\';
								break;
							case '\'':
								c = '\\\'';
								break;
						}
						output += c;
					}
					return output;
				}
			}
		}

		function replaceOutput() {
			//@enter
			//> 替换所有的 //@output 为 e7b4_xpl.g.showLog();
			after = after.replace(outputPattern, replaceCallback);
			//@leave

			function replaceCallback(g0, g1) {
				return g1 + varName + '.g.showLog();';
			}
		}

		function prependHead() {
			//@enter
			//> 添加 Head
			after = head() + '\r\n' + after;
			//@leave

			function head() {
				return 'var ' + varName + ' = require(\'explain\');'
			}
		}
	}

	function save() {
		//@enter
		if (after === undefined || after === null) {
			//> 程序员错误：after 变量根本为 undefined 或 null
			return false;
		}
		if (fs.existsSync(saveTo)) {
			//> 警告：同名文件存在，该文件中的内容将被新内容替代
		}
		try {
			//> 准备以 utf8 编码写入到文件...
			fs.writeFileSync(saveTo, after, 'utf8');
			//> 写入文件成功
			return true;
		} catch(err) {
			//> 写入文件时发生错误
			return false;
		}
		//@leave
	}
}